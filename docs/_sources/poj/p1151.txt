#####################################
[POJ] 1151. Atlantis
#####################################

.. sidebar:: Tags

    - ``tag_segment_tree``
    - ``tag_sweep_line``

.. contents:: TOC
    :depth: 2

******************************************************
`題目 <http://poj.org/problem?id=1151>`_
******************************************************

多筆測資，每筆測資給定平面上 N 個矩形，求這些矩形覆蓋的面積。

************************
Specification
************************

::

    1 <= N <= 100
    1 <= X, Y <= 100000

************************
分析
************************

.. note:: 掃描線，離散化，線段樹

假設我們有一個容器可以支援三種操作

1. 加入一條平行 x 軸的線段
2. 刪除一條平行 x 軸的線段
3. 統計容器中線段聯集的總長

掃描線從 -y 方向掃向 +y 方向，當遇到矩形的上或下邊時：

1. 計算前一條邊 p 到此邊 e 的增加面積，即為 容器中線段總長 * (e.y - p.y)
2. 如果此邊是下邊，將此邊加入容器
3. 如果此邊是上邊，將此邊從容器中刪除。

.. image:: http://i.imgur.com/G90qPtS.png

而這個容器可以使用線段樹來實作。
修改自單點更新的線段樹，但注意是用離散化的 x 座標為分割點。
每個節點多維護一個值 len 代表該子樹中線聯集總長。

.. image:: http://imgur.com/K5b48ts.png

因為我們不會查詢除了整個 x 軸以外的區間（就是我們只會查詢線段樹 root 的 len），我們沒必要用延遲標記。針對操作：

1. 加入線段 [x1, x2]：seg.update(x1, x2, +1)
2. 刪除線段 [x1, x2]：seg.update(x1, x2, -1)
3. 統計聯集總長：seg.root.len

例如我們加入一個線段 ``[10, 25.5]``:

.. image:: http://imgur.com/WN6xdWp.png

如何維護 len 值請看程式碼。

************************
AC Code
************************

.. code-block:: cpp
    :linenos:

    #include <cstdio>
    #include <cstdlib>
    #include <cstring>
    #include <vector>
    #include <string>
    #include <algorithm>
    using namespace std;

    #define sz(x) (int(x.size()))

    const int MAX_NN = (1 << 17);

    struct Rect {
        double x1, y1, x2, y2;
    };

    struct Event {
        double y; int x1, x2, type;
        bool operator < (const Event& e) const {
            if (y == e.y)
                return type < e.type;
            return y < e.y;
        }
    };

    int N;
    vector<Rect> rect;
    vector<Event> es;
    vector<double> xs;

    // 線段樹
    int NN;
    int cnt[MAX_NN];
    double len[MAX_NN];

    void seg_init(int n) {
        NN = 1;
        while (NN < n)
            NN <<= 1;
        fill(cnt, cnt + 2 * NN, 0);
        fill(len, len + 2 * NN, double(0.0));
    }

    void seg_maintain(int u, int l, int r) {
        if (cnt[u] > 0) len[u] = xs[r] - xs[l];
        else {
            if (u >= NN - 1)
                len[u] = 0;
            else
                len[u] = len[u * 2 + 1] + len[u * 2 + 2];
        }
    }

    void seg_update(int a, int b, int x, int u, int l, int r) { // [a, b), [l, r)
        if (r <= a || l >= b) return;
        if (a <= l && r <= b) {
            cnt[u] += x;
            seg_maintain(u, l, r);
            return;
        }
        int m = (l + r) / 2;
        seg_update(a, b, x, u * 2 + 1, l, m);
        seg_update(a, b, x, u * 2 + 2, m, r);
        seg_maintain(u, l, r);
    }

    double solve() {
        // 離散化 x
        xs.clear();
        for (int i = 0; i < N; i++) {
            xs.push_back(rect[i].x1);
            xs.push_back(rect[i].x2);
        }
        sort(xs.begin(), xs.end());
        xs.resize(unique(xs.begin(), xs.end()) - xs.begin());

        // sweep line events
        es.clear();
        for (int i = 0; i < N; i++) {
            int x1 = lower_bound(xs.begin(), xs.end(), rect[i].x1) - xs.begin();
            int x2 = lower_bound(xs.begin(), xs.end(), rect[i].x2) - xs.begin();
            es.push_back((Event) {rect[i].y1, x1, x2, +1});
            es.push_back((Event) {rect[i].y2, x1, x2, -1});
        }
        sort(es.begin(), es.end());

        // find total area
        seg_init(sz(xs));
        seg_update(es[0].x1, es[0].x2, es[0].type, 0, 0, NN + 1);

        double res = 0;
        for (int i = 1; i < sz(es); i++) {
            res += len[0] * (es[i].y - es[i - 1].y);
            seg_update(es[i].x1, es[i].x2, es[i].type, 0, 0, NN + 1);
        }

        return res;
    }

    int main() {
        int tc = 1;
        while (scanf("%d", &N)) {
            if (N == 0) break;

            rect.clear();
            for (int i = 0; i < N; i++) {
                double x1, y1, x2, y2;
                scanf("%lf %lf %lf %lf", &x1, &y1, &x2, &y2);
                rect.push_back((Rect) {x1, y1, x2, y2});
            }

            printf("Test case #%d\n", tc++);
            printf("Total explored area: %.2f\n", solve());

            puts("");
        }

        return 0;
    }
